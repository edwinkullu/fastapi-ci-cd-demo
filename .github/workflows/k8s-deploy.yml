name: Deploy FastAPI App to AWS EKS

on:
  push:
    branches:
      - '**'  # Trigger on all branches

env:
  TF_WORKING_DIR: ./terraform
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/fastapi:latest

jobs:
  provision:
    name: 🏗️ Provision EKS Cluster
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.TF_VAR_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Clean Terraform Cache
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: rm -rf .terraform .terraform.lock.hcl

    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init

    - name: Terraform Plan
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform apply -auto-approve tfplan

  docker:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: provision

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build & Push Docker Image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }} .
        docker push ${{ env.DOCKER_IMAGE }}

  deploy:
    name: 🚀 Deploy to EKS
    runs-on: ubuntu-latest
    needs: [provision, docker]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.TF_VAR_REGION }}

    - name: Set up Kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ secrets.TF_VAR_REGION }} --name ${{ secrets.TF_VAR_CLUSTER_NAME }}

    - name: Deploy Kubernetes Resources
      run: |
        kubectl apply -f kubernetes/clusterissuer.yaml
        kubectl apply -f kubernetes/deployment.yaml
        kubectl apply -f kubernetes/service.yaml
        kubectl apply -f kubernetes/ingress.yaml

    - name: Wait for Deployment to be Ready
      run: |
        kubectl rollout status deployment/fastapi-app
        kubectl get svc fastapi-service

  destroy:
    name: 🧹 Destroy Infrastructure
    runs-on: ubuntu-latest
    needs: deploy
    if: always()  # Ensure cleanup happens even if deploy fails

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.TF_VAR_REGION }}

    - name: Set up AWS CLI
      run: |
        curl "https://d1vvhvl2y92vvt.cloudfront.net/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        aws --version

    - name: Generate kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ secrets.TF_VAR_REGION }} --name ${{ secrets.TF_VAR_CLUSTER_NAME }}
        cat ~/.kube/config > kubeconfig
      continue-on-error: true

    - name: Install Terraform
      run: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo tee /etc/apt/trusted.gpg.d/hashicorp.asc
        sudo apt update && sudo apt install terraform
        terraform version

    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init

    - name: Terraform Destroy
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform destroy -auto-approve
